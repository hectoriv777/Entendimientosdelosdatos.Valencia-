{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOJhiq2I5dR6ea6qh5xTvfR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hectoriv777/Entendimientosdelosdatos.Valencia-/blob/main/Untitled8.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D9_zB_BSNb0g",
        "outputId": "5e2e9165-4656-4fc4-de0d-deb6786dda8e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archivo filtrado guardado en: Valencia_España_listings_50cols.csv\n",
            "Dimensiones: 9009 filas × 51 columnas\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from pathlib import Path\n",
        "\n",
        "# --- RUTAS DE ARCHIVOS ---\n",
        "# Ajusta el nombre/ruta según tengas tu archivo en tu carpeta\n",
        "listings_path = Path(\"listings valencia.csv\")\n",
        "out_path = Path(\"Valencia_España_listings_50cols.csv\")\n",
        "\n",
        "# --- CARGAR DATASET ---\n",
        "try:\n",
        "    # Remove low_memory=False when using engine='python'\n",
        "    df = pd.read_csv(listings_path, engine='python')\n",
        "except UnicodeDecodeError:\n",
        "    # Remove low_memory=False when using engine='python'\n",
        "    df = pd.read_csv(listings_path, encoding=\"latin-1\", engine='python')\n",
        "except Exception as e:\n",
        "    print(f\"Error reading CSV: {e}\")\n",
        "    # If reading with 'python' engine still fails, try reading with quoting=3 (QUOTE_NONE)\n",
        "    try:\n",
        "        # Remove low_memory=False when using engine='python' and quoting=3\n",
        "        df = pd.read_csv(listings_path, engine='python', quoting=3)\n",
        "    except Exception as e2:\n",
        "        print(f\"Error reading CSV with quoting=3: {e2}\")\n",
        "        # If all attempts fail, print the original error for diagnosis\n",
        "        raise e\n",
        "\n",
        "\n",
        "# --- LISTA DE 50 VARIABLES SELECCIONADAS ---\n",
        "selected_cols = [\n",
        "    'id','host_id','neighbourhood','neighbourhood_cleansed','neighbourhood_group_cleansed',\n",
        "    'latitude','longitude','property_type','room_type','accommodates','bathrooms','bathrooms_text',\n",
        "    'bedrooms','beds','amenities','price','minimum_nights','maximum_nights','minimum_minimum_nights',\n",
        "    'maximum_minimum_nights','minimum_maximum_nights','maximum_maximum_nights','minimum_nights_avg_ntm',\n",
        "    'maximum_nights_avg_ntm','has_availability','availability_30','availability_60','availability_90',\n",
        "    'availability_365','calendar_last_scraped','number_of_reviews','number_of_reviews_ltm',\n",
        "    'number_of_reviews_l30d','first_review','last_review','reviews_per_month','review_scores_rating',\n",
        "    'review_scores_accuracy','review_scores_cleanliness','review_scores_checkin',\n",
        "    'review_scores_communication','review_scores_location','review_scores_value','license',\n",
        "    'instant_bookable','calculated_host_listings_count','calculated_host_listings_count_entire_homes',\n",
        "    'calculated_host_listings_count_private_rooms','calculated_host_listings_count_shared_rooms',\n",
        "    'host_is_superhost','host_identity_verified']\n",
        "# --- FILTRAR LAS COLUMNAS PRESENTES ---\n",
        "present_cols = [c for c in selected_cols if c in df.columns]\n",
        "df_filtered = df[present_cols].copy()\n",
        "\n",
        "# --- LIMPIEZA DE LA VARIABLE PRECIO ---\n",
        "if \"price\" in df_filtered.columns:\n",
        "    df_filtered[\"price\"] = pd.to_numeric(\n",
        "        df_filtered[\"price\"].astype(str).str.replace(r\"[^0-9.\\-]\", \"\", regex=True),\n",
        "        errors=\"coerce\"\n",
        "    )\n",
        "\n",
        "# --- GUARDAR CSV FILTRADO ---\n",
        "df_filtered.to_csv(out_path, index=False, encoding=\"utf-8\")\n",
        "\n",
        "print(f\"Archivo filtrado guardado en: {out_path}\")\n",
        "print(f\"Dimensiones: {df_filtered.shape[0]} filas × {df_filtered.shape[1]} columnas\")"
      ]
    }
  ]
}
